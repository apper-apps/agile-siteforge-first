import React, { useCallback, useState } from "react";
import { toast } from "react-toastify";
import ErrorComponent from "@/components/ui/Error";

// AI Service class to handle different AI providers
class AIService {
  constructor(config) {
    this.config = config;
    this.apiKey = config.apiKey;
    this.model = config.aiModel;
  }

  async generateContent(prompt, type = "text") {
    const providers = {
      "gemini": this.callGeminiAPI.bind(this),
      "openrouter": this.callOpenRouterAPI.bind(this),
      "together": this.callTogetherAPI.bind(this)
    };

    const provider = providers[this.model];
    if (!provider) {
      throw new Error(`Unsupported AI model: ${this.model}`);
    }

try {
      return await provider(prompt, type);
    } catch (error) {
      console.error(`AI generation failed for ${this.model}:`, error);
      throw new Error(`Failed to generate content using ${this.model}: ${error.message}`);
    }
  }

  async callGeminiAPI(prompt, type) {
    if (!this.apiKey) {
      throw new Error('Google Gemini API key is required. Please provide your API key in the configuration.');
    }

    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${this.apiKey}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Invalid Google Gemini API key. Please check your credentials.');
        }
        
        if (response.status === 429) {
          throw new Error('Google Gemini API rate limit exceeded. Please try again later.');
        }
        
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error?.message || `Gemini API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        throw new Error('No content generated by Gemini API');
      }
      
      return data.candidates[0].content.parts[0].text;
    } catch (error) {
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        throw new Error('Network error connecting to Google Gemini API. Please check your internet connection.');
      }
      throw error;
    }
  }

  async callOpenRouterAPI(prompt, type) {

if (!this.apiKey) {
      throw new Error('OpenRouter API key is required. Please provide your API key in the configuration.');
    }

    if (!this.apiKey.startsWith('sk-or-')) {
      throw new Error('Invalid OpenRouter API key format. Key should start with "sk-or-"');
    }

    try {
      const response = await fetch("https://openrouter.ai/api/v1/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.apiKey}`,
          "Content-Type": "application/json",
          "X-Title": "SiteForge Pro Website Generator",
        },
        body: JSON.stringify({
          "model": "anthropic/claude-3.5-sonnet",
          "prompt": prompt,
          "temperature": 0.7,
          "max_tokens": 2048
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        
        if (response.status === 401) {
          throw new Error('Invalid OpenRouter API key. Please check your credentials.');
        }
        
        if (response.status === 429) {
          throw new Error('OpenRouter API rate limit exceeded. Please try again later.');
        }
        
        throw new Error(errorData.error?.message || `OpenRouter API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.choices && data.choices.length > 0) {
        return data.choices[0].text;
      }
      
      throw new Error('No content generated by OpenRouter API');
    } catch (error) {
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        throw new Error('Network error connecting to OpenRouter API. Please check your internet connection.');
      }
      throw error;
    }
  }

async callTogetherAPI(prompt, type) {
    if (!this.apiKey) {
      throw new Error('Together AI API key is required. Please provide your API key in the configuration.');
    }

    try {
      const response = await fetch("https://api.together.xyz/inference", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.apiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          "model": "togethercomputer/llama-2-70b-chat",
          "prompt": prompt,
          "temperature": 0.7,
          "max_tokens": 2048
        })
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Invalid Together AI API key. Please check your credentials.');
        }
        
        if (response.status === 429) {
          throw new Error('Together AI API rate limit exceeded. Please try again later.');
        }
        
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error?.message || `Together API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.output && data.output.choices && data.output.choices.length > 0) {
        return data.output.choices[0].text;
      }
      
      throw new Error('No content generated by Together API');
    } catch (error) {
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        throw new Error('Network error connecting to Together AI API. Please check your internet connection.');
      }
      throw error;
}
  }
}

// Helper functions for website generation (moved outside hook)
const generateHTMLFiles = async (businessInfo, services, areas, config, aiService) => {
  // Generate enhanced content using AI
  const contentPrompt = `Generate professional, SEO-optimized content for a ${businessInfo.niche} business called "${businessInfo.name}" in ${businessInfo.city}. 

Business details:
- Company: ${businessInfo.company}
- Description: ${businessInfo.description}
- Services: ${services.map(s => s.name).join(', ')}
- Service Areas: ${areas.map(a => a.name).join(', ')}
- Keywords: ${businessInfo.keywords}

Generate:
1. An engaging hero section headline (different from "${businessInfo.niche}")
2. A compelling business description (expand on provided description)
3. Three key benefits/features with descriptions
4. Call-to-action text variations

Respond in JSON format with keys: hero_headline, business_description, benefits, cta_variations`;

  let enhancedContent;
  try {
    const aiResponse = await aiService.generateContent(contentPrompt);
    enhancedContent = JSON.parse(aiResponse);
  } catch (error) {
    console.warn("AI content generation failed, using fallback content:", error);
    enhancedContent = {
      hero_headline: `Professional ${businessInfo.niche} Services`,
      business_description: businessInfo.description,
      benefits: [
        { title: "Quality Work", description: `Professional ${businessInfo.niche.toLowerCase()} services` },
        { title: "Expert Team", description: "Experienced professionals" },
        { title: "Timely Service", description: "On-time project completion" }
      ],
      cta_variations: ["Get Free Quote", "Call Now", "Contact Us"]
    };
  }

  const files = [
    {
      name: "index.html",
      content: generateIndexHTML(businessInfo, services, areas, config, enhancedContent),
      type: "html"
    }
  ];

  return files;
};

const generateServicePages = async (businessInfo, services, config, aiService) => {
  const serviceFiles = [];
  
  for (const service of services) {
    const servicePrompt = `Generate detailed, SEO-optimized content for a ${service.name} service page for ${businessInfo.name} in ${businessInfo.city}.

Include:
1. Service description (2-3 paragraphs)
2. Key features/benefits (4-5 points)
3. Process steps (3-4 steps)
4. FAQ section (3-4 questions)

Business context: ${businessInfo.description}
Target keywords: ${businessInfo.keywords}

Respond in JSON format with keys: description, features, process, faqs`;

    let serviceContent;
    try {
      const aiResponse = await aiService.generateContent(servicePrompt);
      serviceContent = JSON.parse(aiResponse);
    } catch (error) {
      console.warn(`AI content generation failed for service ${service.name}, using fallback:`, error);
      serviceContent = {
        description: `Professional ${service.name.toLowerCase()} services in ${businessInfo.city} and surrounding areas. Our experienced team delivers quality results for all your ${service.name.toLowerCase()} needs.`,
        features: [`Expert ${service.name} professionals`, "Quality guaranteed", "Competitive pricing", "Timely completion"],
        process: ["Initial consultation", "Project planning", "Expert execution", "Final inspection"],
        faqs: [
          { question: `What does your ${service.name} service include?`, answer: `Our ${service.name} service includes comprehensive solutions tailored to your needs.` },
          { question: "How long does the process take?", answer: "Timeline varies based on project scope, but we always work efficiently." },
          { question: "Do you provide warranties?", answer: "Yes, we stand behind our work with appropriate warranties." }
        ]
      };
    }

    serviceFiles.push({
      name: `services/${service.slug}.html`,
      content: generateServiceHTML(service, businessInfo, config, serviceContent),
      type: "html"
    });
  }

  return serviceFiles;
};

const generateAreaPages = async (businessInfo, areas, config, aiService) => {
  const areaFiles = [];
  
  for (const area of areas) {
    const areaPrompt = `Generate location-specific content for ${businessInfo.niche} services in ${area.name} for ${businessInfo.name}.

Include:
1. Location-specific description mentioning ${area.name}
2. Local benefits (3-4 points)
3. Service coverage details
4. Contact information for that area

Business context: ${businessInfo.description}
Services: ${businessInfo.services?.map(s => s.name).join(', ') || 'Various services'}

Respond in JSON format with keys: description, local_benefits, coverage_details`;

    let areaContent;
    try {
      const aiResponse = await aiService.generateContent(areaPrompt);
      areaContent = JSON.parse(aiResponse);
    } catch (error) {
      console.warn(`AI content generation failed for area ${area.name}, using fallback:`, error);
      areaContent = {
        description: `Professional ${businessInfo.niche.toLowerCase()} services in ${area.name}. We're proud to serve the ${area.name} community with reliable, high-quality services.`,
        local_benefits: [`Local ${area.name} expertise`, "Fast response times", "Community-focused service", "Local knowledge advantage"],
        coverage_details: `We provide comprehensive ${businessInfo.niche.toLowerCase()} services throughout ${area.name} and surrounding neighborhoods.`
      };
    }

    areaFiles.push({
      name: `${businessInfo.areaPageSlug || "service-areas"}/${area.slug}.html`,
      content: generateAreaHTML(area, businessInfo, config, areaContent),
      type: "html"
    });
  }

  return areaFiles;
};

const generateAssetFiles = async (config) => {
  return [
    {
      name: "main.js",
      content: generateMainJS(),
      type: "js"
    },
    {
      name: "custom.css",
      content: generateCustomCSS(config.colors),
      type: "css"
    },
    {
      name: ".htaccess",
      content: generateHtaccess(),
      type: "txt"
    }
  ];
};

const generateSEOFiles = async (businessInfo, services, areas) => {
  return [
    {
      name: "sitemap.xml",
      content: generateSitemap(businessInfo, services, areas),
      type: "xml"
    },
    {
      name: "robots.txt",
      content: generateRobotsTxt(businessInfo),
      type: "txt"
    },
    {
      name: "llm.txt",
      content: generateLLMTxt(businessInfo),
      type: "txt"
    }
  ];
};

const createZipPackage = async (files) => {
  const JSZip = (await import('jszip')).default;
  const zip = new JSZip();
  
  files.forEach(file => {
    const pathParts = file.name.split('/');
    if (pathParts.length > 1) {
      let currentFolder = zip;
      for (let i = 0; i < pathParts.length - 1; i++) {
        currentFolder = currentFolder.folder(pathParts[i]);
      }
      currentFolder.file(pathParts[pathParts.length - 1], file.content);
    } else {
      zip.file(file.name, file.content);
    }
  });
  
  return await zip.generateAsync({ 
    type: "blob",
    compression: "DEFLATE",
    compressionOptions: { level: 6 }
  });
};

// Enhanced HTML generators with AI-enhanced content
const generateIndexHTML = (businessInfo, services, areas, config, enhancedContent) => {
  const keywords = businessInfo.keywords.split(',').map(k => k.trim()).join(', ');
  
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${businessInfo.name} - ${businessInfo.niche} in ${businessInfo.city}</title>
    <meta name="description" content="${enhancedContent.business_description}">
    <meta name="keywords" content="${keywords}">
    <meta name="author" content="${businessInfo.company}">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://${businessInfo.websiteSlug}.netlify.app/">
    <meta property="og:title" content="${businessInfo.name} - ${businessInfo.niche} in ${businessInfo.city}">
    <meta property="og:description" content="${enhancedContent.business_description}">
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:title" content="${businessInfo.name} - ${businessInfo.niche} in ${businessInfo.city}">
    <meta property="twitter:description" content="${enhancedContent.business_description}">
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>${businessInfo.name.charAt(0)}</text></svg>">
    
    <!-- Stylesheets -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer">
    <link rel="stylesheet" href="custom.css">
    
    <!-- Schema.org structured data -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "LocalBusiness",
      "name": "${businessInfo.name}",
      "description": "${enhancedContent.business_description}",
      "telephone": "${businessInfo.phone}",
      "address": {
        "@type": "PostalAddress",
        "streetAddress": "${businessInfo.address}",
        "addressLocality": "${businessInfo.city}"
      },
      "url": "https://${businessInfo.websiteSlug}.netlify.app/",
      "hasOfferCatalog": {
        "@type": "OfferCatalog",
        "name": "Services",
        "itemListElement": [
          ${services.map((service, index) => `{
            "@type": "Offer",
            "itemOffered": {
              "@type": "Service",
              "name": "${service.name}",
              "description": "Professional ${service.name.toLowerCase()} services in ${businessInfo.city}"
            }
          }`).join(',')}
        ]
      }
    }
    </script>
</head>
<body class="font-sans antialiased">
    <!-- Navigation -->
    <header class="bg-white shadow-lg sticky top-0 z-50" role="banner">
        <nav class="container mx-auto px-4 py-4" role="navigation" aria-label="Main navigation">
            <div class="flex justify-between items-center">
                <div class="flex items-center">
                    <h1 class="text-2xl font-bold" style="color: ${config.colors.primary}">
                        <i class="fas fa-home mr-2" aria-hidden="true"></i>
                        ${businessInfo.name}
                    </h1>
                </div>
                <div class="hidden md:flex space-x-6">
                    <a href="#home" class="nav-link" aria-label="Home section">Home</a>
                    <a href="#about" class="nav-link" aria-label="About section">About</a>
                    <a href="#services" class="nav-link" aria-label="Services section">Services</a>
                    ${areas.length > 0 ? `<a href="#areas" class="nav-link" aria-label="Service areas section">Areas</a>` : ''}
                    <a href="#contact" class="nav-link" aria-label="Contact section">Contact</a>
                </div>
                <a href="tel:${businessInfo.phone}" class="btn-primary" aria-label="Call ${businessInfo.phone}">
                    <i class="fas fa-phone mr-2" aria-hidden="true"></i>
                    ${businessInfo.phone}
                </a>
                <button id="mobile-menu-btn" class="md:hidden text-gray-600" aria-label="Toggle mobile menu" aria-expanded="false">
                    <i class="fas fa-bars text-xl" aria-hidden="true"></i>
                </button>
            </div>
            <div id="mobile-menu" class="hidden md:hidden mt-4 pb-4 border-t border-gray-200">
                <div class="flex flex-col space-y-2">
                    <a href="#home" class="nav-link py-2">Home</a>
                    <a href="#about" class="nav-link py-2">About</a>
                    <a href="#services" class="nav-link py-2">Services</a>
                    ${areas.length > 0 ? `<a href="#areas" class="nav-link py-2">Areas</a>` : ''}
                    <a href="#contact" class="nav-link py-2">Contact</a>
                </div>
            </div>
        </nav>
    </header>

    <main role="main">
        <!-- Hero Section -->
        <section id="home" class="hero bg-gradient-to-r text-white py-20" style="background: linear-gradient(135deg, ${config.colors.primary}, ${config.colors.secondary})">
            <div class="container mx-auto px-4 text-center">
                <h2 class="text-5xl font-bold mb-4">${enhancedContent.hero_headline}</h2>
                <p class="text-xl mb-8 max-w-2xl mx-auto">${enhancedContent.business_description}</p>
                <div class="flex flex-col sm:flex-row gap-4 justify-center">
                    <a href="#contact" class="btn-secondary">
                        <i class="fas fa-quote-right mr-2" aria-hidden="true"></i>
                        ${enhancedContent.cta_variations[0] || "Get Free Quote"}
                    </a>
                    <a href="tel:${businessInfo.phone}" class="btn-outline">
                        <i class="fas fa-phone mr-2" aria-hidden="true"></i>
                        ${enhancedContent.cta_variations[1] || "Call Now"}
                    </a>
                </div>
            </div>
        </section>

        <!-- About Section -->
        <section id="about" class="py-16 bg-gray-50">
            <div class="container mx-auto px-4">
                <div class="max-w-4xl mx-auto text-center">
                    <h2 class="text-3xl font-bold mb-8">About ${businessInfo.company}</h2>
                    <p class="text-lg text-gray-700 mb-8">${enhancedContent.business_description}</p>
                    <div class="grid md:grid-cols-3 gap-8 mt-12">
                        ${enhancedContent.benefits.slice(0, 3).map((benefit, index) => `
                        <div class="text-center">
                            <i class="fas fa-${index === 0 ? 'award' : index === 1 ? 'users' : 'clock'} text-4xl mb-4" style="color: ${config.colors.primary}" aria-hidden="true"></i>
                            <h3 class="font-semibold mb-2">${benefit.title}</h3>
                            <p class="text-gray-600">${benefit.description}</p>
                        </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        </section>

        <!-- Services Section -->
        <section id="services" class="py-16">
            <div class="container mx-auto px-4">
                <h2 class="text-3xl font-bold text-center mb-12">Our Services</h2>
                <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                    ${services.map(service => `
                    <article class="service-card group">
                        <div class="mb-4">
                            <i class="fas fa-tools text-3xl group-hover:scale-110 transition-transform duration-300" style="color: ${config.colors.primary}" aria-hidden="true"></i>
                        </div>
                        <h3 class="text-xl font-semibold mb-4">${service.name}</h3>
                        <p class="text-gray-600 mb-4">Professional ${service.name.toLowerCase()} services in ${businessInfo.city} and surrounding areas.</p>
                        ${config.pageType === 'multi' ? `<a href="services/${service.slug}.html" class="text-blue-600 hover:text-blue-800 font-medium">Learn More →</a>` : ''}
                    </article>
                    `).join("")}
                </div>
            </div>
        </section>

        ${areas.length > 0 ? `
        <!-- Service Areas Section -->
        <section id="areas" class="py-16 bg-gray-50">
            <div class="container mx-auto px-4">
                <h2 class="text-3xl font-bold text-center mb-12">Service Areas</h2>
                <div class="max-w-4xl mx-auto">
                    <p class="text-center text-gray-600 mb-8">We proudly serve the following areas:</p>
                    <div class="grid md:grid-cols-3 lg:grid-cols-4 gap-4">
                        ${areas.map(area => `
                        <div class="text-center p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow">
                            <i class="fas fa-map-marker-alt text-2xl mb-2" style="color: ${config.colors.primary}" aria-hidden="true"></i>
                            <h3 class="font-medium">${area.name}</h3>
                            ${config.pageType === 'multi' ? `<a href="${businessInfo.areaPageSlug || 'service-areas'}/${area.slug}.html" class="text-sm text-blue-600 hover:text-blue-800">View Details</a>` : ''}
                        </div>
                        `).join("")}
                    </div>
                </div>
            </div>
        </section>
        ` : ''}

        <!-- Contact Section -->
        <section id="contact" class="py-16 bg-gray-900 text-white">
            <div class="container mx-auto px-4">
                <div class="max-w-4xl mx-auto">
                    <h2 class="text-3xl font-bold text-center mb-12">Get Your Free Quote Today</h2>
                    <div class="grid md:grid-cols-2 gap-12">
                        <div>
                            <h3 class="text-xl font-semibold mb-6">Contact Information</h3>
                            <div class="space-y-4">
                                <div class="flex items-center">
                                    <i class="fas fa-phone text-xl mr-4" style="color: ${config.colors.accent}" aria-hidden="true"></i>
                                    <div>
                                        <h4 class="font-medium">Phone</h4>
                                        <a href="tel:${businessInfo.phone}" class="text-gray-300 hover:text-white">${businessInfo.phone}</a>
                                    </div>
                                </div>
                                <div class="flex items-center">
                                    <i class="fas fa-map-marker-alt text-xl mr-4" style="color: ${config.colors.accent}" aria-hidden="true"></i>
                                    <div>
                                        <h4 class="font-medium">Address</h4>
                                        <p class="text-gray-300">${businessInfo.address}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>
                            <h3 class="text-xl font-semibold mb-6">Request a Quote</h3>
                            <form class="space-y-4" action="#" method="POST">
                                <div>
                                    <label for="name" class="block text-sm font-medium mb-1">Name</label>
                                    <input type="text" id="name" name="name" required class="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20">
                                </div>
                                <div>
                                    <label for="email" class="block text-sm font-medium mb-1">Email</label>
                                    <input type="email" id="email" name="email" required class="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20">
                                </div>
                                <div>
                                    <label for="service" class="block text-sm font-medium mb-1">Service Needed</label>
                                    <select id="service" name="service" class="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20">
                                        <option value="">Select a service</option>
                                        ${services.map(service => `<option value="${service.slug}">${service.name}</option>`).join('')}
                                    </select>
                                </div>
                                <div>
                                    <label for="message" class="block text-sm font-medium mb-1">Message</label>
                                    <textarea id="message" name="message" rows="4" class="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20" placeholder="Tell us about your project..."></textarea>
                                </div>
                                <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors">
                                    <i class="fas fa-paper-plane mr-2" aria-hidden="true"></i>
                                    Send Message
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-8" role="contentinfo">
        <div class="container mx-auto px-4">
            <div class="text-center">
                <h3 class="text-xl font-bold mb-2">${businessInfo.name}</h3>
                <p class="text-gray-400 mb-4">${enhancedContent.business_description}</p>
                <p class="text-sm text-gray-500">
                    &copy; ${new Date().getFullYear()} ${businessInfo.company}. All rights reserved.
                </p>
            </div>
        </div>
    </footer>

    <script src="main.js"></script>
</body>
</html>`;
};

const generateServiceHTML = (service, businessInfo, config, serviceContent) => {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${service.name} - ${businessInfo.name}</title>
    <meta name="description" content="${serviceContent.description}">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../custom.css">
</head>
<body class="font-sans antialiased">
    <header class="bg-white shadow-lg">
        <nav class="container mx-auto px-4 py-4">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl font-bold" style="color: ${config.colors.primary}">
                    <a href="../index.html">${businessInfo.name}</a>
                </h1>
                <a href="tel:${businessInfo.phone}" class="btn-primary">
                    ${businessInfo.phone}
                </a>
            </div>
        </nav>
    </header>

    <main class="py-16">
        <div class="container mx-auto px-4">
            <div class="max-w-4xl mx-auto">
                <h1 class="text-4xl font-bold mb-8">${service.name} Services</h1>
                <p class="text-lg text-gray-700 mb-8">${serviceContent.description}</p>
                
                <div class="grid md:grid-cols-2 gap-8 mb-12">
                    <div>
                        <h2 class="text-2xl font-semibold mb-4">Key Features</h2>
                        <ul class="space-y-2">
                            ${serviceContent.features.map(feature => `<li class="flex items-center"><i class="fas fa-check text-green-500 mr-2"></i>${feature}</li>`).join('')}
                        </ul>
                    </div>
                    <div>
                        <h2 class="text-2xl font-semibold mb-4">Our Process</h2>
                        <ol class="space-y-2">
                            ${serviceContent.process.map((step, index) => `<li class="flex items-center"><span class="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm mr-3">${index + 1}</span>${step}</li>`).join('')}
                        </ol>
                    </div>
                </div>

                <div class="bg-gray-50 p-8 rounded-lg">
                    <h2 class="text-2xl font-semibold mb-6">Frequently Asked Questions</h2>
                    ${serviceContent.faqs.map(faq => `
                    <div class="mb-6">
                        <h3 class="font-semibold text-lg mb-2">${faq.question}</h3>
                        <p class="text-gray-700">${faq.answer}</p>
                    </div>
                    `).join('')}
                </div>

                <div class="text-center mt-12">
                    <a href="../index.html#contact" class="btn-primary">
                        Get Free Quote for ${service.name}
                    </a>
                </div>
            </div>
        </div>
    </main>
</body>
</html>`;
};

const generateAreaHTML = (area, businessInfo, config, areaContent) => {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${businessInfo.niche} in ${area.name} - ${businessInfo.name}</title>
    <meta name="description" content="${areaContent.description}">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../custom.css">
</head>
<body class="font-sans antialiased">
    <header class="bg-white shadow-lg">
        <nav class="container mx-auto px-4 py-4">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl font-bold" style="color: ${config.colors.primary}">
                    <a href="../index.html">${businessInfo.name}</a>
                </h1>
                <a href="tel:${businessInfo.phone}" class="btn-primary">
                    ${businessInfo.phone}
                </a>
            </div>
        </nav>
    </header>

    <main class="py-16">
        <div class="container mx-auto px-4">
            <div class="max-w-4xl mx-auto">
                <h1 class="text-4xl font-bold mb-8">${businessInfo.niche} in ${area.name}</h1>
                <p class="text-lg text-gray-700 mb-8">${areaContent.description}</p>
                
                <div class="grid md:grid-cols-2 gap-8 mb-12">
                    <div>
                        <h2 class="text-2xl font-semibold mb-4">Local Benefits</h2>
                        <ul class="space-y-2">
                            ${areaContent.local_benefits.map(benefit => `<li class="flex items-center"><i class="fas fa-map-marker-alt text-blue-500 mr-2"></i>${benefit}</li>`).join('')}
                        </ul>
                    </div>
                    <div>
                        <h2 class="text-2xl font-semibold mb-4">Service Coverage</h2>
                        <p class="text-gray-700">${areaContent.coverage_details}</p>
                    </div>
                </div>

                <div class="text-center mt-12">
                    <a href="../index.html#contact" class="btn-primary">
                        Contact Us for Service in ${area.name}
                    </a>
                </div>
            </div>
        </div>
    </main>
</body>
</html>`;
};

const generateMainJS = () => {
  return `// Main JavaScript file - Enhanced functionality
document.addEventListener('DOMContentLoaded', function() {
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // Mobile menu toggle
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuBtn && mobileMenu) {
        mobileMenuBtn.addEventListener('click', () => {
            const isHidden = mobileMenu.classList.contains('hidden');
            mobileMenu.classList.toggle('hidden');
            mobileMenuBtn.setAttribute('aria-expanded', !isHidden);
            
            const icon = mobileMenuBtn.querySelector('i');
            if (icon) {
                if (isHidden) {
                    icon.className = 'fas fa-times text-xl';
                } else {
                    icon.className = 'fas fa-bars text-xl';
                }
            }
        });
    }

    // Form submission handling
    const contactForm = document.querySelector('form[action="#"]');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            
            if (!data.name || !data.email) {
                alert('Please fill in all required fields.');
                return;
            }
            
            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
            if (!emailRegex.test(data.email)) {
                alert('Please enter a valid email address.');
                return;
            }
            
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Sending...';
            submitBtn.disabled = true;
            
            setTimeout(() => {
                alert('Thank you for your message! We will get back to you soon.');
                this.reset();
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }, 2000);
        });
    }
});`;
};

const generateCustomCSS = (colors) => {
  return `/* Enhanced Custom CSS with Responsive Design */
:root {
    --primary-color: ${colors.primary};
    --secondary-color: ${colors.secondary};
    --accent-color: ${colors.accent};
}

/* Base styles */
* {
    box-sizing: border-box;
}

html {
    scroll-behavior: smooth;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
}

/* Button styles */
.btn-primary {
    background-color: var(--primary-color);
    color: white;
    padding: 12px 24px;
    border-radius: 8px;
    font-weight: 600;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
}

.btn-primary:hover {
    opacity: 0.9;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.btn-secondary {
    background-color: var(--secondary-color);
    color: white;
    padding: 16px 32px;
    border-radius: 8px;
    font-weight: 600;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
}

.btn-secondary:hover {
    opacity: 0.9;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
}

.btn-outline {
    background-color: transparent;
    color: white;
    padding: 16px 32px;
    border: 2px solid white;
    border-radius: 8px;
    font-weight: 600;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    cursor: pointer;
}

.btn-outline:hover {
    background-color: white;
    color: var(--primary-color);
    transform: translateY(-2px);
}

/* Navigation styles */
.nav-link {
    color: #374151;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
    padding: 8px 16px;
    border-radius: 4px;
}

.nav-link:hover {
    color: var(--primary-color);
    background-color: rgba(99, 102, 241, 0.1);
}

/* Service card styles */
.service-card {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    border: 1px solid #e5e7eb;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.service-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
}

/* Hero section */
.hero {
    min-height: 500px;
    display: flex;
    align-items: center;
    position: relative;
    overflow: hidden;
}

/* Responsive Design */
@media (max-width: 768px) {
    .hero {
        min-height: 400px;
        padding: 60px 0;
    }

    .hero h2 {
        font-size: 2.5rem;
    }

    .service-card {
        padding: 1.5rem;
    }

    .btn-primary, .btn-secondary, .btn-outline {
        padding: 14px 20px;
        font-size: 14px;
    }

    .container {
        padding-left: 1rem;
        padding-right: 1rem;
    }
}`;
};

const generateSitemap = (businessInfo, services, areas) => {
  const baseUrl = `https://${businessInfo.websiteSlug}.netlify.app`;
  const now = new Date().toISOString().split('T')[0];
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    <url>
        <loc>${baseUrl}/</loc>
        <lastmod>${now}</lastmod>
        <changefreq>weekly</changefreq>
        <priority>1.0</priority>
    </url>
    ${services.map(service => `
    <url>
        <loc>${baseUrl}/services/${service.slug}.html</loc>
        <lastmod>${now}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.8</priority>
    </url>`).join("")}
    ${areas.map(area => `
    <url>
        <loc>${baseUrl}/${businessInfo.areaPageSlug || 'service-areas'}/${area.slug}.html</loc>
        <lastmod>${now}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.7</priority>
    </url>`).join("")}
</urlset>`;
};

const generateRobotsTxt = (businessInfo) => {
  return `User-agent: *
Allow: /
Disallow: /admin/

Sitemap: https://${businessInfo.websiteSlug}.netlify.app/sitemap.xml`;
};

const generateLLMTxt = (businessInfo) => {
  return `# ${businessInfo.name} - AI Generated Website

This website was generated by SiteForge Pro using AI technology.

## Business Information
- **Business Name**: ${businessInfo.name}
- **Company**: ${businessInfo.company}
- **Location**: ${businessInfo.city}
- **Phone**: ${businessInfo.phone}
- **Address**: ${businessInfo.address}
- **Business Niche**: ${businessInfo.niche}

## Business Description
${businessInfo.description}

## SEO Keywords
${businessInfo.keywords}

Generated on: ${new Date().toISOString()}`;
};

const generateHtaccess = () => {
  return `# Enable compression
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/javascript
</IfModule>

# Cache static files
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
    ExpiresByType image/png "access plus 1 month"
    ExpiresByType image/jpg "access plus 1 month"
    ExpiresByType image/jpeg "access plus 1 month"
</IfModule>`;
};

const useWebsiteGenerator = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState(null);

  const generateWebsite = useCallback(async ({ businessInfo, services, areas, config, onProgress }) => {
    try {
      setIsGenerating(true);
      setError(null);

      onProgress(0, "Initializing AI content generation...");
      
      // Initialize AI service
      const aiService = new AIService(config);
      
      // Step 2: Generate main HTML files
      onProgress(20, "Generating homepage content...");
      const htmlFiles = await generateHTMLFiles(businessInfo, services, areas, config, aiService);
      
      // Step 3: Generate service pages (if multi-page)
      let serviceFiles = [];
      if (config.pageType === 'multi' && services.length > 0) {
        onProgress(40, "Creating service pages...");
        serviceFiles = await generateServicePages(businessInfo, services, config, aiService);
      }
      
      // Step 4: Generate area pages (if multi-page and areas exist)
      let areaFiles = [];
      if (config.pageType === 'multi' && areas.length > 0) {
        onProgress(60, "Creating service area pages...");
        areaFiles = await generateAreaPages(businessInfo, areas, config, aiService);
      }
      
      // Step 5: Generate asset files
      onProgress(80, "Adding styles and scripts...");
      const assetFiles = await generateAssetFiles(config);
      
      // Step 6: Generate SEO files
      onProgress(90, "Optimizing for search engines...");
      const seoFiles = await generateSEOFiles(businessInfo, services, areas);
      
      // Step 7: Create ZIP package
      onProgress(95, "Packaging website files...");
      const allFiles = [...htmlFiles, ...serviceFiles, ...areaFiles, ...assetFiles, ...seoFiles];
      const zipBlob = await createZipPackage(allFiles);
      
      onProgress(100, "Website generated successfully!");
      
      setIsGenerating(false);
      return zipBlob;
      
    } catch (error) {
      console.error("Website generation failed:", error);
      setError(error.message || 'Website generation failed');
      setIsGenerating(false);
      throw error;
    }
  }, []);

  return {
    generateWebsite,
    isGenerating,
    error
  };
};

export default useWebsiteGenerator;